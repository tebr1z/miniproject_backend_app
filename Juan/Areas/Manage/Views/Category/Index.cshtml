@model IEnumerable<Juan.Models.Category>

<div class="body-wrapper">
    <div class="container-fluid">
        <div class="card card-body py-3">
            <div class="row align-items-center">
                <div class="col-12">
                    <div class="d-sm-flex align-items-center justify-space-between">
                        <h4 class="mb-4 mb-sm-0 card-title">Category List</h4>
                        <nav aria-label="breadcrumb" class="ms-auto">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item d-flex align-items-center">
                                    <a class="text-muted text-decoration-none d-flex" href="index.html">
                                        <iconify-icon icon="solar:home-2-line-duotone" class="fs-6"></iconify-icon>
                                    </a>
                                </li>
                                <li class="breadcrumb-item" aria-current="page">
                                    <span class="badge fw-medium fs-2 bg-primary-subtle text-primary">Category List</span>
                                </li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>
        </div>

        <div class="category-list">
            <div class="card">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center gap-6 mb-9">
                        <form class="position-relative">
                            <input type="text" class="form-control search-chat py-2 ps-5" id="text-srh" placeholder="Search Category">
                            <i class="ti ti-search position-absolute top-50 start-0 translate-middle-y fs-6 text-dark ms-3"></i>
                        </form>
                        <a class="btn btn-primary" href="@Url.Action("Create", "Category")">Create New Category</a>
                    </div>
                    <div class="table-responsive border rounded">
                        <table class="table align-middle text-nowrap mb-0">
                            <thead>
                                <tr>
                                    <th scope="col">Category Name</th>
                                    <th scope="col">Create Date</th>
                                    <th scope="col">Modify Date</th>
                                    <th scope="col">Number of Products</th>
                                    <th scope="col">Is Deleted</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var category in Model)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" class="form-control category-name" value="@category.CategoryName" data-category-id="@category.CategoryId" />
                                        </td>
                                        <td>
                                            <p class="mb-0">@category.CreatedDate.ToString("ddd, MMM dd yyyy")</p>
                                        </td>
                                        <td>
                                            <p class="mb-0">@category.ModifiedDate?.ToString("ddd, MMM dd yyyy")</p>
                                        </td>
                                        <td>
                                            <p class="mb-0">@category.ProductCategories.Count()</p>
                                        </td>
                                        <td>
                                            <input type="checkbox" class="form-check-input is-deleted" data-category-id="@category.CategoryId" @(category.IsDelete ? "checked" : "")>
                                        </td>
                                        <td>
                                            <button class="btn btn-success btn-update" data-category-id="@category.CategoryId">Update</button>
                                            <a class="fs-6 text-muted ms-3 btn btn-outline-danger"
                                               href="javascript:void(0);"
                                               data-bs-toggle="tooltip"
                                               data-bs-placement="top"
                                               data-bs-title="Delete"
                                               onclick="confirmDelete('@Url.Action("Delete", "Category", new { id = category.CategoryId })')">
                                                <i class="ti ti-trash"></i>
                                            </a>
                                        </td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('.btn-update').forEach(button => {
            button.addEventListener('click', function () {
                const categoryId = this.getAttribute('data-category-id');
                const row = this.closest('tr');
                const categoryName = row.querySelector('.category-name').value;
                const isDeleted = row.querySelector('.is-deleted').checked;

                axios.post('@Url.Action("Update", "Category", new { Area = "Manage" })', {
                    CategoryId: parseInt(categoryId),
                    CategoryName: categoryName,
                    IsDelete: isDeleted
                })
                    .then(response => {
                        if (response.data.success) {
                            Swal.fire({
                                title: 'Updated!',
                                text: 'The category has been updated.',
                                icon: 'success',
                                confirmButtonColor: '#3085d6'
                            }).then(() => {
                                // Refresh the ModifyDate and IsDelete checkbox
                                row.querySelector('.is-deleted').checked = isDeleted;
                                row.querySelector('td:nth-child(3) p').innerText = new Date().toLocaleDateString('en-GB', {
                                    weekday: 'short',
                                    year: 'numeric',
                                    month: 'short',
                                    day: 'numeric'
                                });
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.data.message,
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    });
            });
        });
    });

    function confirmDelete(url) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You won\'t be able to revert this!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(url, { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'The category has been deleted.',
                                icon: 'success',
                                confirmButtonColor: '#3085d6'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message,
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    });
            }
        });
    }
</script>
